{"version":3,"sources":["components/Card.js","components/CardList.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","id","name","height","mass","hair_color","skin_color","eye_color","birth_year","gender","className","CardList","cardArray","characters","map","person","index","key","App","state","fetch","then","response","json","people","setState","results","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qOAmBeA,EAjBF,SAAC,GAAqF,IAApFC,EAAmF,EAAnFA,GAAIC,EAA+E,EAA/EA,KAAMC,EAAyE,EAAzEA,OAAQC,EAAiE,EAAjEA,KAAMC,EAA2D,EAA3DA,WAAYC,EAA+C,EAA/CA,WAAYC,EAAmC,EAAnCA,UAAWC,EAAwB,EAAxBA,WAAYC,EAAY,EAAZA,OACrF,OAEC,yBAAKR,GAAIA,EAAIS,UAAU,oDACtB,wBAAIA,UAAU,mBAAmBR,GACjC,sCAAYC,GACZ,oCAAUC,GACV,0CAAgBC,GAChB,0CAAgBC,GAChB,yCAAeC,GACf,0CAAgBC,GAChB,sCAAYC,KCcAE,EAxBE,SAAC,GAAiB,IAE5BC,EAF2B,EAAfC,WAEWC,KAAI,SAACC,EAAQC,GAEzC,OACC,kBAAC,EAAD,CACCC,IAAKD,EACLd,KAAMa,EAAOb,KACbC,OAAQY,EAAOZ,OACfC,KAAMW,EAAOX,KACbC,WAAYU,EAAOV,WACnBC,WAAYS,EAAOT,WACnBC,UAAWQ,EAAOR,UAClBC,WAAYO,EAAOP,WACnBC,OAAQM,EAAON,YAGlB,OACE,6BACEG,ICWUM,G,kBA3Bd,aAAc,IAAD,8BACZ,+CACKC,MAAQ,CACZN,WAAY,IAHD,E,iFAOQ,IAAD,OACnBO,MAAM,gCACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACvBF,MAAK,SAAAG,GAAM,OAAI,EAAKC,SAAS,CAACZ,WAAWW,EAAOE,e,+BAG3C,IACDb,EAAcc,KAAKR,MAAnBN,WAEP,OACC,yBAAKH,UAAU,MACd,4BAAQA,UAAU,aACjB,wBAAIA,UAAU,UAAd,mCAED,kBAAC,EAAD,CAAUA,UAAU,YAAYG,WAAYA,S,GAvB9Be,IAAMC,YCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,MAAK,SAAAqB,GACjCA,EAAaC,iB","file":"static/js/main.df37bcbd.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({id, name, height, mass, hair_color, skin_color, eye_color, birth_year, gender}) => {\n\treturn(\n\n\t\t<div id={id} className='bg-washed-blue dib br3 pa3 ma2 grow bw2 shadow-5'>\n\t\t\t<h5 className='ttc f4 fw3 gold'>{name}</h5>\n\t\t\t<p>Height: {height}</p>\n\t\t\t<p>Mass: {mass}</p>\n\t\t\t<p>Hair_color: {hair_color}</p>\n\t\t\t<p>Skin Color: {skin_color}</p>\n\t\t\t<p>Eye Color: {eye_color}</p>\n\t\t\t<p>Birth Year: {birth_year}</p>\n\t\t\t<p>Gender: {gender}</p>\n\t\t</div>\n\n\t);\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({characters}) =>{\n\n\tconst cardArray = characters.map((person, index)=>{\n\t\t\n\t\treturn (\n\t\t\t<Card \n\t\t\t\tkey={index}\n\t\t\t\tname={person.name}\n\t\t\t\theight={person.height}\n\t\t\t\tmass={person.mass}\n\t\t\t\thair_color={person.hair_color}\n\t\t\t\tskin_color={person.skin_color}\n\t\t\t\teye_color={person.eye_color}\n\t\t\t\tbirth_year={person.birth_year}\n\t\t\t\tgender={person.gender}/>\n\t\t);\n\t})\n\treturn (\n\t\t\t<div>\n\t\t\t\t{cardArray}\t\n\t\t\t</div>\n\t\t);\n}\n\nexport default CardList;","import React from 'react';\nimport CardList from '../components/CardList';\nimport './App.css';\n\nclass App extends React.Component{\n\n\tconstructor(){\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tcharacters: []\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tfetch('https://swapi.co/api/people/')\n\t\t.then(response=> response.json())\n  \t\t.then(people => this.setState({characters:people.results}));\n\t}\n\n\trender(){\t\n\t\tconst {characters} = this.state;\n\t\t\n\t\treturn(\n\t\t\t<div className=\"tc\">\n\t\t\t\t<header className=\"pa3 white\">\n\t\t\t\t\t<h2 className='f2 ttc'>Know your Starwarz characters!</h2>\n\t\t\t\t</header>\n\t\t\t\t<CardList className='dark-blue' characters={characters}/>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}